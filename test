import * as GaussianSplats3D from './src/node_modules/@mkkellogg/gaussian-splats-3d/build/gaussian-splats-3d.module.js';
import * as THREE from 'three';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

// Размеры рендера
const renderWidth = 800;
const renderHeight = 600;

// Создаем контейнер для рендера
const rootElement = document.createElement('div');
rootElement.style.width = renderWidth + 'px';
rootElement.style.height = renderHeight + 'px';
document.body.appendChild(rootElement);

// 1. Рендер для 3D-сцены
const renderer3D = new THREE.WebGLRenderer({
    antialias: false,
    alpha: true,
});
renderer3D.setSize(renderWidth, renderHeight);
rootElement.appendChild(renderer3D.domElement);

// 2. Рендер для UI (спрайтов)
const rendererUI = new THREE.WebGLRenderer({
    antialias: false,
    alpha: true,
});
rendererUI.setSize(renderWidth, renderHeight);
rendererUI.domElement.style.position = 'absolute';
rendererUI.domElement.style.top = '0';
rendererUI.domElement.style.left = '0';
rootElement.appendChild(rendererUI.domElement);

// Создаем сцену для объектов
const threeScene = new THREE.Scene();

// Загружаем текстуру для спрайта
const textureLoader = new THREE.TextureLoader();
const spriteTexture = textureLoader.load('images/Button.png');  // Путь к текстуре

// Создаем и добавляем спрайт с текстурой
const spriteMaterial = new THREE.SpriteMaterial({
    map: spriteTexture,
    transparent: true,  // Включаем прозрачность
    opacity: 1,        // Начальная непрозрачность
    depthWrite: false,   // Отключаем запись в буфер глубины для спрайта
    depthTest: true,     // Включаем тест глубины (объекты будут правильно перекрывать друг друга)
});
const sprite = new THREE.Sprite(spriteMaterial);
sprite.position.set(3, -2, 2);
sprite.renderOrder = 100;  // Устанавливаем порядок рендеринга для спрайта
threeScene.add(sprite);

// Инициализация Viewer с точными параметрами
const viewer = new GaussianSplats3D.Viewer({
    'selfDrivenMode': false,
    'threeScene': threeScene,
    'renderer': renderer3D,
    'camera': new THREE.PerspectiveCamera(65, renderWidth / renderHeight, 0.1, 500),
    'useBuiltInControls': false,  // Управление не используется, будет использоваться OrbitControls
});

// Камера
const camera = viewer.camera;
camera.position.set(-1, -4, 6);
camera.up.set(0, -1, 0).normalize();
camera.lookAt(new THREE.Vector3(0, 4, 0));

// Настроим OrbitControls для управления камерой
const controls = new OrbitControls(camera, renderer3D.domElement);
controls.enableDamping = true;
controls.dampingFactor = 0.25;
controls.screenSpacePanning = false;
controls.enableZoom = true;  // Включить зум с мышью
controls.enableRotate = true;  // Включить вращение с мышью


// Настроим анимацию камеры
let isAnimating = false;
const startPos = new THREE.Vector3();
const startTarget = new THREE.Vector3();
const endPos = new THREE.Vector3();
const endTarget = new THREE.Vector3();
let animationProgress = 1;

function animateCameraTo(position, target, duration = 1.5) {
    if (isAnimating) return;

    startPos.copy(camera.position);
    startTarget.copy(controls.target);
    endPos.set(...position);
    endTarget.set(...target);

    isAnimating = true;
    animationProgress = 0;

    const animate = () => {
        if (!isAnimating) return;

        animationProgress += 0.02 / duration;
        if (animationProgress >= 1) {
            animationProgress = 1;
            isAnimating = false;
        }

        camera.position.lerpVectors(startPos, endPos, animationProgress);
        controls.target.lerpVectors(startTarget, endTarget, animationProgress);
        controls.update();

        if (isAnimating) {
            requestAnimationFrame(animate);
        }
    };
    animate();
}

// Добавляем кнопки для анимации камеры
const buttonContainer = document.createElement('div');
buttonContainer.style.position = 'absolute';
buttonContainer.style.top = '10px';
buttonContainer.style.left = '10px';
document.body.appendChild(buttonContainer);

function createButton(label, position, target) {
    const button = document.createElement('button');
    button.innerText = label;
    button.style.margin = '5px';
    button.onclick = () => animateCameraTo(position, target);
    buttonContainer.appendChild(button);
}

createButton('Вид спереди', [0, 0, 5], [0, 0, 0]);
createButton('Вид сверху', [0, -5, 0], [0, 0, 0]);
createButton('Вид сбоку', [5, -1, 0], [0, 0, 0]);

// Загружаем внешний файл и добавляем его в Viewer
viewer.addSplatScene('https://huggingface.co/spaces/Vision70s/GaussianVision70s/resolve/main/13MilCleanUPed%D0%A12.ksplat', {
    progressiveLoad: true,
}).then(() => {
    animate();
});

// Основная анимация
function animate() {
    requestAnimationFrame(animate);
    if (!isAnimating) controls.update();  // Обновление контролов
    viewer.update();
    viewer.render();
    rendererUI.render(threeScene, camera);  // Рендерим UI (спрайты и кнопки)
}
